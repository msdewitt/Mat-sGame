"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const Rx_1 = require("rxjs/Rx");
const fetch_1 = require("../fetch");
const _1 = require("./");
const util_1 = require("../util");
const easy_injectionjs_1 = require("easy-injectionjs");
let HttpFactory = class HttpFactory {
    getHttp(type) {
        return (util_1.isSecure(type))
            ? this._secureHttp || (this._secureHttp = this.genHttp(type))
            : this._http || (this._http = this.genHttp(type));
    }
    genHttp(type) {
        let http = axios_1.default.create();
        return util_1.isSecure(type)
            ? this.cache.getItem(_1.Token).map((x) => {
                http.interceptors.request.use(config => {
                    if (util_1.isSecure(type) && x.token) {
                        config.headers['post']['Authorization'] = x.prefix + ' ' + x.token;
                        config.headers['get']['Authorization'] = x.prefix + ' ' + x.token;
                        config.headers['put']['Authorization'] = x.prefix + ' ' + x.token;
                        config.headers['delete']['Authorization'] = x.prefix + ' ' + x.token;
                        config.headers['patch']['Authorization'] = x.prefix + ' ' + x.token;
                        config.headers['head']['Authorization'] = x.prefix + ' ' + x.token;
                    }
                    config.headers['post']['Content-Type'] = 'application/json';
                    config.headers['put']['Content-Type'] = 'application/json';
                    config.headers['patch']['Content-Type'] = 'application/json';
                    return config;
                });
                http.interceptors.response.use((response) => {
                    if (x && x.key && response.data[x.key])
                        x.token = response.data[x.key];
                    return response;
                });
                return http;
            })
            : Rx_1.Observable.of(http).map(x => {
                http.interceptors.request.use(config => {
                    config.headers['post']['Content-Type'] = 'application/json';
                    config.headers['put']['Content-Type'] = 'application/json';
                    config.headers['patch']['Content-Type'] = 'application/json';
                    return config;
                });
                return x;
            });
    }
};
__decorate([
    easy_injectionjs_1.Easy(),
    __metadata("design:type", fetch_1.Cache)
], HttpFactory.prototype, "cache", void 0);
HttpFactory = __decorate([
    easy_injectionjs_1.EasySingleton()
], HttpFactory);
exports.HttpFactory = HttpFactory;
//# sourceMappingURL=auth-interceptor.js.map