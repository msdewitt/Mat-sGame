"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const fetch_1 = require("../fetch");
const Rx_1 = require("rxjs/Rx");
const axios_1 = require("axios");
const easy_injectionjs_1 = require("easy-injectionjs");
let EasyTokenAuth = class EasyTokenAuth {
    constructor(config = easy_injectionjs_1.is('CONFIG'), token = easy_injectionjs_1.is(_1.Token), cache = easy_injectionjs_1.is(fetch_1.Cache)) {
        this.config = config;
        this.token = token;
        this.cache = cache;
    }
    login(loginParams) {
        return Rx_1.Observable.fromPromise(axios_1.default.post(this.config.loginUrl, loginParams))
            .map((x) => (this.token.token = (this.token.key) ? x.data[this.token.key] : x.headers['Authorization']))
            .flatMap((token) => this.cache.setItem(_1.Token, token));
    }
    logout() {
        return fetch_1.Cache.removeItem(_1.Token)
            .flatMap(_ => axios_1.default.delete(this.config.logoutUrl));
    }
    register(registerParams) {
        return Rx_1.Observable.fromPromise(axios_1.default.post(this.config.registerUrl, registerParams))
            .flatMap((x) => (x.headers['Authorization'] || x.data[this.token.key])
            ? this.cache.setItem(_1.Token, (this.token.token = (x.headers['Authorization'])
                ? x.headers['Authorization']
                : x.data[this.token.key]))
            : Rx_1.Observable.fromPromise(x.data));
    }
    validate() {
        return Rx_1.Observable.fromPromise(axios_1.default.get(this.config.validateUrl));
    }
    validateData(data) {
        return Rx_1.Observable.fromPromise(axios_1.default.post(this.config.validateDataUrl, data));
    }
};
EasyTokenAuth = __decorate([
    easy_injectionjs_1.EasySingleton('TOKEN_AUTH'),
    __metadata("design:paramtypes", [Object, _1.Token,
        fetch_1.Cache])
], EasyTokenAuth);
exports.EasyTokenAuth = EasyTokenAuth;
let EasyAuth = class EasyAuth {
    constructor(config = easy_injectionjs_1.is('CONFIG')) {
        this.config = config;
    }
    login(loginParams) {
        return Rx_1.Observable.fromPromise(axios_1.default.post(this.config.loginUrl, loginParams)
            .then((x) => x.data));
    }
    logout() {
        return Rx_1.Observable.fromPromise(axios_1.default.delete(this.config.logoutUrl));
    }
    validate() {
        return Rx_1.Observable.fromPromise(axios_1.default.get(this.config.validateUrl));
    }
    register(registerParams) {
        return Rx_1.Observable.fromPromise(axios_1.default.post(this.config.registerUrl, registerParams));
    }
    validateData(data) {
        return Rx_1.Observable.fromPromise(axios_1.default.post(this.config.validateDataUrl, data));
    }
};
EasyAuth = __decorate([
    easy_injectionjs_1.EasySingleton('SESSION_AUTH'),
    __metadata("design:paramtypes", [Object])
], EasyAuth);
exports.EasyAuth = EasyAuth;
//# sourceMappingURL=auth.js.map