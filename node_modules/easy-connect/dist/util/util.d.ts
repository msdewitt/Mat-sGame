import { ApiBase, Api, Filter, IConfig, AuthType } from '../core';
export declare const isPrimitive: (type: any) => boolean;
export declare class FilterContainer {
}
export declare class QueryContainer {
}
export declare const config: <T extends new (...args: any[]) => {}>(value: ApiBase) => any;
export declare const authConfig: <T extends new (...args: any[]) => {}>(config: IConfig, authType?: AuthType) => any;
export declare const api: <T extends new (...args: any[]) => {}>(value: Api) => (target: T) => any;
export declare const key: (value?: string | Filter) => (target: Object, propertykey: string) => any;
export declare const query: (value?: string | Filter) => (target: Object, propertykey: string) => any;
export declare function id(target: Object, key: string): void;
export declare const cacheable: <T extends new (...args: any[]) => {}>(expiry?: number) => (target: T) => void;
export declare function secure<T extends {
    new (...args: any[]): {};
}>(target: T): void;
export declare function create<T>(type: (new (...args: any[]) => T)): T;
export declare const access: <T extends new (...args: any[]) => {}>(target: T) => {};
export declare const accessId: <T extends new (...args: any[]) => {}>(target: T) => {};
export declare const accessQuery: <T extends new (...args: any[]) => {}>(target: T, key: string) => Filter;
export declare const accessFilter: <T extends new (...args: any[]) => {}>(target: T, key: string) => Filter;
export declare const isSecure: <T extends new (...args: any[]) => {}>(target: T) => {};
export declare const isCacheable: <T extends new (...args: any[]) => {}>(target: T) => number;
export declare const getName: <T extends new (...args: any[]) => {}>(instance: T) => string;
export declare const getBaseUrl: () => string;
export declare const getQueryKey: <T extends new (...args: any[]) => {}>(target: T, key: string) => string;
