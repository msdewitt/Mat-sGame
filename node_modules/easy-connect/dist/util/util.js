"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const easy_injectionjs_1 = require("easy-injectionjs");
exports.isPrimitive = (type) => (typeof type === "string"
    || typeof type === "number" || typeof type === "boolean");
let FilterContainer = class FilterContainer {
};
FilterContainer = __decorate([
    easy_injectionjs_1.EasyPrototype()
], FilterContainer);
exports.FilterContainer = FilterContainer;
let QueryContainer = class QueryContainer {
};
QueryContainer = __decorate([
    easy_injectionjs_1.EasyPrototype()
], QueryContainer);
exports.QueryContainer = QueryContainer;
// Decorators
exports.config = (value) => function (target) {
    easy_injectionjs_1.Easily('BASE_URL', value.baseUrl);
    easy_injectionjs_1.Easily('AUTH_TYPE', value.authtype);
};
exports.authConfig = (config, authType) => function (target) {
    easy_injectionjs_1.Easily('CONFIG', config);
    easy_injectionjs_1.Easily('AUTH_TYPE', authType);
};
exports.api = (value) => function (target) {
    easy_injectionjs_1.Easily('API_' + target.name, value);
};
exports.key = (value) => function (target, propertykey) {
    let _existing = easy_injectionjs_1.is('FILTER_' + target.constructor.name) || new FilterContainer();
    let _key = '';
    let _filter;
    if (!value || exports.isPrimitive(value)) {
        if (value)
            _key = value.toString();
        _filter = {
            key: (_key || propertykey),
            appendBase: true
        };
    }
    else {
        _filter = value;
        if (!_filter.key)
            _filter.key = propertykey;
    }
    _existing[(_key || propertykey)] = _filter;
    easy_injectionjs_1.Easily('FILTER_' + target.constructor.name, _existing);
};
exports.query = (value) => function (target, propertykey) {
    let _existing = easy_injectionjs_1.is('QUERY_' + target.constructor.name) || new FilterContainer();
    let _key = '';
    let _filter;
    if (!value || exports.isPrimitive(value)) {
        if (value)
            _key = value.toString();
        _filter = {
            key: (_key || propertykey),
            appendBase: true
        };
    }
    else {
        _filter = value;
        if (!_filter.key)
            _filter.key = propertykey;
    }
    if (!easy_injectionjs_1.is('QUERY_CONFIG_' + target.constructor.name)) {
        _existing[(_key || propertykey)] = _filter;
        easy_injectionjs_1.Easily('QUERY_CONFIG_' + target.constructor.name, _existing);
        easy_injectionjs_1.Easily('QUERY_KEY_' + target.constructor.name + '_' + (_key || propertykey), propertykey);
    }
};
function id(target, key) {
    easy_injectionjs_1.Easily('ID_' + target.constructor.name, key);
}
exports.id = id;
exports.cacheable = (expiry) => function (target) {
    easy_injectionjs_1.Easily('CACHE_' + target.name, expiry || 6480000);
};
function secure(target) {
    easy_injectionjs_1.Easily('SECURE_' + target.name, true);
}
exports.secure = secure;
// Accessors
function create(type) {
    return new type();
}
exports.create = create;
exports.access = (target) => easy_injectionjs_1.is('API_' + target.name);
exports.accessId = (target) => easy_injectionjs_1.is('ID_' + target.name);
exports.accessQuery = (target, key) => easy_injectionjs_1.is('QUERY_CONFIG_' + target.name)[key];
exports.accessFilter = (target, key) => easy_injectionjs_1.is('FILTER_' + target.name)[key];
exports.isSecure = (target) => easy_injectionjs_1.is('SECURE_' + target.name);
exports.isCacheable = (target) => easy_injectionjs_1.is('CACHE_' + target.name);
exports.getName = (instance) => instance.name;
exports.getBaseUrl = () => easy_injectionjs_1.is('BASE_URL');
exports.getQueryKey = (target, key) => easy_injectionjs_1.is('QUERY_KEY_' + target.name + '_' + key);
//# sourceMappingURL=util.js.map