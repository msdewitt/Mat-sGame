"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const auth_1 = require("../auth");
const _1 = require("./");
const _ = require("lodash");
const easy_injectionjs_1 = require("easy-injectionjs");
function genInstance(Type, target, match) {
    _.forEach(Object.getOwnPropertyNames(match), x => {
        if (target[x] && !_1.isPrimitive(match[x])) {
            genInstance(Type, target[x], match[x]);
        }
        else {
            target[x] = match[x];
        }
    });
    return target;
}
exports.genInstance = genInstance;
function construct(Type, url, id, _http = easy_injectionjs_1.is(auth_1.HttpFactory)) {
    let _data = easy_injectionjs_1.is(Type);
    return _http.getHttp(Type).toPromise()
        .then(http => http.get(url + `/${id}`)
        .then(x => {
        return genInstance(Type, _data, x.data);
    }));
}
exports.construct = construct;
function constructArray(Type, url, _http = easy_injectionjs_1.is(auth_1.HttpFactory)) {
    let items = [];
    return _http.getHttp(Type).toPromise()
        .then(http => http.get(url))
        .then(x => {
        _.forEach(x.data, y => {
            let item = easy_injectionjs_1.is(Type);
            items.push(genInstance(Type, item, y));
        });
        return items;
    });
}
exports.constructArray = constructArray;
function createApiData(Type, url, data, _http = easy_injectionjs_1.is(auth_1.HttpFactory)) {
    return _http.getHttp(Type).toPromise()
        .then(http => http.post(url, data));
}
exports.createApiData = createApiData;
function updateApiData(Type, url, data, _http = easy_injectionjs_1.is(auth_1.HttpFactory)) {
    return _http.getHttp(Type).toPromise()
        .then(http => http.put(url, data));
}
exports.updateApiData = updateApiData;
function deleteApiData(Type, url, _http = easy_injectionjs_1.is(auth_1.HttpFactory)) {
    return _http.getHttp(Type).toPromise()
        .then(http => http.delete(url));
}
exports.deleteApiData = deleteApiData;
//# sourceMappingURL=options.js.map