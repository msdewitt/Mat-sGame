"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const util_1 = require("../util");
const easy_injectionjs_1 = require("easy-injectionjs");
let Container = class Container {
    constructor(_type = easy_injectionjs_1.is('CURRENT')) {
        this._type = _type;
    }
    createSubArray(sub, obs, prefix, errCallBack) {
        return sub || (sub = obs.subscribe({
            next: (arr) => {
                easy_injectionjs_1.Easily(prefix + this._type.name, arr);
            },
            error: (errCallBack) ? errCallBack : (err) => { throw err; }
        }));
    }
    removeSub() {
        if (this._all)
            this._all.unsubscribe();
        if (this._query)
            this._query.unsubscribe();
    }
    ensure() {
        if (!this._id) {
            this._id = util_1.accessId(this._type);
        }
    }
    All() {
        this.ensure();
        return this.createSubArray(this._all, this._easy.getAll(this._type), 'ALL_');
    }
    Current(selected) {
        if (this._current)
            this._current.unsubscribe();
        return (this._current = this._easy.getById(this._type, selected[this._id])
            .subscribe(x => {
            easy_injectionjs_1.Easily('CURRENT_DATA_' + this._type.name, x);
        }));
    }
    CurrentByKey(selected, key) {
        if (this._current)
            this._current.unsubscribe();
        let _filter = util_1.accessFilter(this._type, key);
        return (this._current = this._easy.getByFilter(this._type, (_filter) ? selected[_filter.key] : key)
            .subscribe(x => {
            easy_injectionjs_1.Easily('CURRENT_DATA_' + this._type.name, x);
        }));
    }
    Query(key, args) {
        this.ensure();
        let _key = util_1.getQueryKey(this._type, key);
        return this.createSubArray(this._query, this._easy.query(this._type, key, args), 'QUERY_', () => {
            let arr = easy_injectionjs_1.is('ALL_' + this._type.name);
            arr.filter(x => x[_key] == args);
            easy_injectionjs_1.Easily('QUERY_' + this._type.name, arr);
        });
    }
    add(data) {
        this.removeSub();
        this._easy.create(this._type, data)
            .subscribe(_ => {
            let arr = easy_injectionjs_1.is('ALL_' + this._type.name);
            arr.push(data);
            easy_injectionjs_1.Easily('ALL_' + this._type.name, arr);
        });
    }
    update(data) {
        this.removeSub();
        let _u_id = util_1.access(this._type);
        if (_u_id.update) {
            this._easy.update(this._type, data)
                .subscribe(_ => {
                let arr = easy_injectionjs_1.is('ALL_' + this._type.name);
                arr[data[this._id]] = data;
                easy_injectionjs_1.Easily('ALL_' + this._type.name, arr);
            });
        }
        else {
            this._easy.updateById(this._type, data)
                .subscribe(_ => {
                let arr = easy_injectionjs_1.is('ALL_' + this._type.name);
                arr[data[this._id]] = data;
                easy_injectionjs_1.Easily('ALL_' + this._type.name, arr);
            });
        }
    }
    delete(data) {
        this.removeSub();
        let _u_id = util_1.access(this._type);
        if (_u_id.delete) {
            this._easy.delete(this._type)
                .subscribe(_ => {
                let arr = easy_injectionjs_1.is('ALL_' + this._type.name);
                arr.splice(arr.indexOf(data, 0), 1);
                easy_injectionjs_1.Easily('ALL_' + this._type.name, arr);
            });
        }
        else {
            this._easy.deleteDataById(this._type, data)
                .subscribe(_ => {
                let arr = easy_injectionjs_1.is('ALL_' + this._type.name);
                arr.splice(arr.indexOf(data, 0), 1);
                easy_injectionjs_1.Easily('ALL_' + this._type.name, arr);
            });
        }
    }
};
__decorate([
    easy_injectionjs_1.Easy(),
    __metadata("design:type", _1.EasyConnect)
], Container.prototype, "_easy", void 0);
Container = __decorate([
    easy_injectionjs_1.EasyPrototype(),
    __metadata("design:paramtypes", [Object])
], Container);
exports.Container = Container;
//# sourceMappingURL=container.js.map