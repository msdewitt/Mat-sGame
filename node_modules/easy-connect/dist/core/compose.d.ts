import { Container } from './';
import { Subscription } from 'rxjs/Rx';
export declare class Compose {
    private content;
    constructor();
    getContainer<T>(Type: (new () => T)): Container;
}
export declare const container: <T extends new (...args: any[]) => {}>() => (target: T) => void;
export declare const Get_All: <T extends new (...args: any[]) => {}>(target: T) => Subscription;
export declare const Get_Query: <T extends new (...args: any[]) => {}>(target: T, key: string, args: string) => Subscription;
export declare const Add: <T extends new (...args: any[]) => {}>(target: T, data: any) => void;
export declare const Update: <T extends new (...args: any[]) => {}>(target: T, data: any) => void;
export declare const Delete: <T extends new (...args: any[]) => {}>(target: T, data: any) => void;
export declare const All: <T extends new (...args: any[]) => {}>(target: T) => any[];
export declare const Query: <T extends new (...args: any[]) => {}>(target: T) => any[];
export declare const Get_Current: (target: Object, key?: any) => Subscription;
export declare const Current: <T extends new (...args: any[]) => {}>(target: T) => {};
