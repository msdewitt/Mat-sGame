import { Observable } from 'rxjs/Rx';
import { IEasy } from './';
export declare class EasyConnect implements IEasy {
    private mutex;
    private cache;
    private actions;
    private extra;
    constructor();
    getAll<T>(Type: (new (...args: any[]) => T), force?: boolean, url?: string): Observable<T | T[]>;
    getById<T>(Type: (new (...args: any[]) => T), id: any, force?: boolean, url?: string): Observable<T | T[]>;
    getByFilter<T>(Type: (new (...args: any[]) => T), key: any, force?: boolean, url?: string): Observable<T | T[]>;
    query<T>(Type: (new (...args: any[]) => T), key: string, args: string, url?: string): Observable<T[]>;
    create<T>(Type: (new (...args: any[]) => T), data: T | T[], url?: string): Observable<any>;
    update<T>(Type: (new (...args: any[]) => T), data: T | T[], url?: string): Observable<any>;
    updateById<T>(Type: (new (...args: any[]) => T), data: T | T[], id?: any, url?: string): Observable<any>;
    delete<T>(Type: (new (...args: any[]) => T), url?: string): Observable<any>;
    deleteDataById<T>(Type: (new (...args: any[]) => T), data: T | T[], url?: string, id?: any): Observable<any>;
}
