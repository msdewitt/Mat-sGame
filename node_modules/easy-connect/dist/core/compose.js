"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const util_1 = require("../util");
const easy_injectionjs_1 = require("easy-injectionjs");
let Compose = class Compose {
    constructor() {
        this.content = new class {
        }();
    }
    getContainer(Type) {
        let _container = this.content[util_1.getName(Type)];
        if (!_container) {
            easy_injectionjs_1.Easily('CURRENT', Type);
            _container = (this.content[util_1.getName(Type)] = easy_injectionjs_1.is(_1.Container));
        }
        return _container;
    }
};
Compose = __decorate([
    easy_injectionjs_1.EasySingleton(),
    __metadata("design:paramtypes", [])
], Compose);
exports.Compose = Compose;
exports.container = () => function (target) {
    let _container = easy_injectionjs_1.is(Compose).getContainer(target);
    easy_injectionjs_1.Easily('CONTAINER_' + target.name, _container);
};
exports.Get_All = (target) => easy_injectionjs_1.is('CONTAINER_' + target.name).All();
exports.Get_Query = (target, key, args) => easy_injectionjs_1.is('CONTAINER_' + target.name).Query(key, args);
exports.Add = (target, data) => easy_injectionjs_1.is('CONTAINER_' + target.name).add(data);
exports.Update = (target, data) => easy_injectionjs_1.is('CONTAINER_' + target.name).update(data);
exports.Delete = (target, data) => easy_injectionjs_1.is('CONTAINER_' + target.name).delete(data);
exports.All = (target) => easy_injectionjs_1.is('ALL_' + target.name);
exports.Query = (target) => easy_injectionjs_1.is('QUERY_' + target.name);
exports.Get_Current = (target, key) => {
    let _container = easy_injectionjs_1.is('CONTAINER_' + target.constructor.name);
    return (!key)
        ? _container.Current(target)
        : _container.CurrentByKey(target, key);
};
exports.Current = (target) => easy_injectionjs_1.is('CURRENT_DATA_' + target.name);
//# sourceMappingURL=compose.js.map