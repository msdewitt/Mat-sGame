"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const fetch_1 = require("../fetch");
const util_1 = require("../util");
const Rx_1 = require("rxjs/Rx");
const fetch_2 = require("../fetch");
const easy_injectionjs_1 = require("easy-injectionjs");
let EasyConnect = class EasyConnect {
    constructor() {
    }
    getAll(Type, force, url) {
        return this.mutex.getAll(Type, force, url)
            .do(x => {
            if (util_1.isCacheable(Type))
                this.cache.setItem(Type, x);
        }).catch(err => util_1.isCacheable(Type)
            ? this.cache.getItem(Type)
            : Rx_1.Observable.throw("Couldn't get the data"));
    }
    getById(Type, id, force, url) {
        return this.mutex.getByKey(Type, id, force, url)
            .do(x => {
            if (util_1.isCacheable(Type))
                this.cache.setItemByKey(Type, x, id);
        }).catch(err => util_1.isCacheable(Type)
            ? this.cache.getItem(Type)
            : Rx_1.Observable.throw("Couldn't get the data"));
    }
    getByFilter(Type, key, force, url) {
        return this.mutex.getByFilter(Type, key, force, url)
            .do(x => {
            if (util_1.isCacheable(Type))
                this.cache.setItemByKey(Type, x, key);
        }).catch(err => util_1.isCacheable(Type)
            ? this.cache.getItem(Type)
            : Rx_1.Observable.throw("Couldn't get the data"));
    }
    query(Type, key, args, url) {
        return this.extra.query(Type, key, args, url);
    }
    create(Type, data, url) {
        return this.actions.postData(Type, data, url);
    }
    update(Type, data, url) {
        return this.actions.updateData(Type, data, url);
    }
    updateById(Type, data, id, url) {
        return this.actions.updateDataById(Type, data, id, url);
    }
    delete(Type, url) {
        return this.actions.deleteData(Type, url);
    }
    deleteDataById(Type, data, url, id) {
        return this.actions.deleteDataById(Type, data, id, url);
    }
};
__decorate([
    easy_injectionjs_1.Easy(),
    __metadata("design:type", fetch_1.Mutex)
], EasyConnect.prototype, "mutex", void 0);
__decorate([
    easy_injectionjs_1.Easy(),
    __metadata("design:type", fetch_1.Cache)
], EasyConnect.prototype, "cache", void 0);
__decorate([
    easy_injectionjs_1.Easy(),
    __metadata("design:type", fetch_2.Actions)
], EasyConnect.prototype, "actions", void 0);
__decorate([
    easy_injectionjs_1.Easy(),
    __metadata("design:type", fetch_1.Extra)
], EasyConnect.prototype, "extra", void 0);
EasyConnect = __decorate([
    easy_injectionjs_1.EasySingleton(),
    __metadata("design:paramtypes", [])
], EasyConnect);
exports.EasyConnect = EasyConnect;
//# sourceMappingURL=easy.js.map