"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const easy_injectionjs_1 = require("easy-injectionjs");
let Mutex = class Mutex {
    getAll(Type, force, url) {
        return (force)
            ? this.store.putData(Type, this.actions.getData(Type))
            : (this.store.check(Type))
                ? this.store.getData(Type)
                : this.store.putData(Type, this.actions.getData(Type));
    }
    getByKey(Type, id, force, url) {
        return (force)
            ? this.store.putDataByKey(Type, this.actions.getDataById(Type, id), id)
            : (this.store.checkByKey(Type, id))
                ? this.store.getDataByKey(Type, id)
                : this.store.putDataByKey(Type, this.actions.getDataById(Type, id), id);
    }
    getByFilter(Type, key, force, url) {
        return (force)
            ? this.store.putDataByKey(Type, this.actions.getDataByFilter(Type, key), key)
            : (this.store.checkByKey(Type, key))
                ? this.store.getDataByKey(Type, key)
                : this.store.putDataByKey(Type, this.actions.getDataByFilter(Type, key), key);
    }
};
__decorate([
    easy_injectionjs_1.Easy('STORE'),
    __metadata("design:type", Object)
], Mutex.prototype, "store", void 0);
__decorate([
    easy_injectionjs_1.Easy(),
    __metadata("design:type", _1.Actions)
], Mutex.prototype, "actions", void 0);
Mutex = __decorate([
    easy_injectionjs_1.EasySingleton()
], Mutex);
exports.Mutex = Mutex;
//# sourceMappingURL=mutex.js.map