"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rx_1 = require("rxjs/Rx");
const _storage = require("localforage");
const util_1 = require("../util");
const _ = require("lodash");
const easy_injectionjs_1 = require("easy-injectionjs");
let Cache = class Cache {
    getItem(key) {
        let _key = util_1.getName(key);
        return Rx_1.Observable.fromPromise(this.getData(key));
    }
    getData(key) {
        let _key = util_1.getName(key);
        return _storage.getItem(_key)
            .then((x) => (x.expiry < Date.now())
            ? (_.isArray(x.data))
                ? this.constructArray(key, x.data)
                : this.construct(key, x.data)
            : (_storage.removeItem(_key).then(y => null)));
    }
    setData(key, data) {
        const _in = {
            data: data,
            expiry: util_1.isCacheable(key) + Date.now()
        };
        return _storage.setItem(util_1.getName(key), _in).then(_ => data);
    }
    constructArray(type, x) {
        let _key = util_1.getName(type);
        let items = [];
        _.forEach(x, y => {
            let item = easy_injectionjs_1.is(type);
            items.push(util_1.genInstance(type, item, y));
        });
        return items;
    }
    construct(type, x) {
        let _data = easy_injectionjs_1.is(type);
        return util_1.genInstance(type, _data, x);
    }
    setItem(key, data) {
        return Rx_1.Observable.fromPromise(this.setData(key, data));
    }
    setItemByKey(key, data, id) {
        return this.getItem(key)
            .flatMap(x => {
            x[id] = data;
            return this.setItem(key, x);
        });
    }
    setAsyncItemByKey(key, data, id) {
        return data.do((x) => {
            this.getData(key)
                .then(y => {
                y[id] = x;
                this.setData(key, y);
            });
        });
    }
    setAsycItem(key, data) {
        return data.do((x) => {
            this.setData(key, x);
        });
    }
    static removeItem(key) {
        return Rx_1.Observable.fromPromise(_storage.removeItem(util_1.getName(key)));
    }
};
Cache = __decorate([
    easy_injectionjs_1.EasySingleton()
], Cache);
exports.Cache = Cache;
//# sourceMappingURL=cache.js.map