"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/fromPromise");
require("rxjs/add/operator/map");
require("rxjs/add/operator/catch");
const util_1 = require("../util");
const easy_injectionjs_1 = require("easy-injectionjs");
let Actions = class Actions {
    constructor(_baseUrl = easy_injectionjs_1.is('BASE_URL')) {
        this._baseUrl = _baseUrl;
    }
    getData(Type, url) {
        let _keys = util_1.access(Type);
        return (url)
            ? Observable_1.Observable.fromPromise(util_1.constructArray(Type, url))
            : (_keys)
                ? Observable_1.Observable.fromPromise(util_1.constructArray(Type, (this._baseUrl || _keys.baseUrl) ? this._baseUrl || _keys.baseUrl + '/' + _keys.getAll : _keys.getAll))
                : Observable_1.Observable.throw('No data url was defined.');
    }
    getDataById(Type, id, url) {
        let _keys = util_1.access(Type);
        return (url && id)
            ? Observable_1.Observable.fromPromise(util_1.construct(Type, this._baseUrl || _keys.baseUrl + '/' + url, id))
            : (_keys.getById)
                ? Observable_1.Observable.fromPromise(util_1.construct(Type, (this._baseUrl || _keys.baseUrl) ? this._baseUrl || _keys.baseUrl + '/' + _keys.getById : _keys.getById, id))
                : Observable_1.Observable.throw('No data url or id was defined.');
    }
    getDataByFilter(Type, key, url) {
        let _keys = util_1.access(Type);
        let _filter = util_1.accessFilter(Type, key);
        return (url)
            ? Observable_1.Observable.fromPromise(util_1.construct(Type, url, key))
            : (_filter.key)
                ? Observable_1.Observable.fromPromise(util_1.construct(Type, (_filter.appendBase)
                    ? this._baseUrl || _keys.baseUrl + '/' + _filter.key
                    : _filter.url + '/' + _filter.url, key))
                : Observable_1.Observable.throw('No data url or key was defined.');
    }
    postData(Type, data, url) {
        let _keys = util_1.access(Type);
        return (url)
            ? Observable_1.Observable.fromPromise(util_1.createApiData(Type, url, data))
            : (_keys.create)
                ? Observable_1.Observable.fromPromise(util_1.createApiData(Type, (_keys.baseUrl) ? _keys.baseUrl + '/' + _keys.create : _keys.create, data))
                : Observable_1.Observable.throw('No data url was defined.');
    }
    updateData(Type, data, url) {
        let _keys = util_1.access(Type);
        return (url)
            ? Observable_1.Observable.fromPromise(util_1.updateApiData(Type, url, data))
            : (_keys.update)
                ? Observable_1.Observable.fromPromise(util_1.updateApiData(Type, (_keys.baseUrl) ? _keys.baseUrl + '/' + _keys.update : _keys.update, data))
                : Observable_1.Observable.throw('No data url was defined.');
    }
    updateDataById(Type, data, id, url) {
        let _keys = util_1.access(Type);
        let _id = util_1.accessId(Type);
        return (url)
            ? Observable_1.Observable.fromPromise(util_1.updateApiData(Type, (id)
                ? url + '/' + id
                : url + '/' + data[_id], data))
            : (_keys.baseUrl)
                ? Observable_1.Observable.fromPromise(util_1.updateApiData(Type, (_keys.baseUrl)
                    ? _keys.baseUrl + '/' + _keys.updateById + '/' + (id || data[_id])
                    : _keys.updateById + '/' + (id || data[_id]), data))
                : Observable_1.Observable.throw('No data url was defined.');
    }
    deleteData(Type, url) {
        let _keys = util_1.access(Type);
        return (url)
            ? Observable_1.Observable.fromPromise(util_1.deleteApiData(Type, url))
            : (_keys.delete)
                ? Observable_1.Observable.fromPromise(util_1.deleteApiData(Type, (_keys.baseUrl) ? _keys.baseUrl + '/' + _keys.delete : _keys.delete))
                : Observable_1.Observable.throw('No data url was defined.');
    }
    deleteDataById(Type, data, id, url) {
        let _keys = util_1.access(Type);
        let _id = util_1.accessId(Type);
        return (url)
            ? Observable_1.Observable.fromPromise(util_1.deleteApiData(Type, (id)
                ? url + '/' + id
                : url + '/' + data[_id]))
            : (_keys.baseUrl)
                ? Observable_1.Observable.fromPromise(util_1.deleteApiData(Type, (_keys.baseUrl)
                    ? _keys.baseUrl + '/' + _keys.deleteById + '/' + (id || data[_id])
                    : _keys.deleteById + '/' + (id || data[_id])))
                : Observable_1.Observable.throw('No data url was defined.');
    }
};
Actions = __decorate([
    easy_injectionjs_1.EasySingleton(),
    __metadata("design:paramtypes", [String])
], Actions);
exports.Actions = Actions;
//# sourceMappingURL=actions.js.map