"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const _1 = require("./");
const containers_1 = require("../containers");
exports.EasySingleton = (name) => function (target) {
    let _existing = _1.Wrapper.getDepedencies(target.name);
    let _container = new containers_1.GenericContainer(_1.Stereotype.Singleton, target, _existing, (name) ? name : target.name);
    _1.resolveDependencyTree(target, _container, _existing);
    let instance = _container.resolveDepedendencies();
    return class extends target {
        constructor(...args) {
            super();
            _container.resolved.forEach(x => {
                this[x.ref] = x.resolved;
            });
        }
    };
};
exports.EasyPrototype = (name) => function (target) {
    let _existing = _1.Wrapper.getDepedencies(target.name);
    let _container = new containers_1.GenericContainer(_1.Stereotype.Prototype, target, _existing, (name) ? name : target.name);
    _1.resolveDependencyTree(target, _container, _existing);
    let instance = _container.resolveDepedendencies();
    return class extends target {
        constructor(...args) {
            super();
            _container.resolved.forEach(x => {
                this[x.ref] = x.resolved;
            });
        }
    };
};
exports.EasyFactory = (name) => function (target) {
    let _existing = _1.Wrapper.getDepedencies(target.name);
    let _factory = new containers_1.FactoryContainer(_1.Stereotype.Factory, target, _existing, (name) ? name : target.name);
    _factory.resolveDepedendencies();
};
exports.Easy = (name) => function (target, propertyKey) {
    let _existing = _1.Wrapper.getDepedencies(target.constructor.name);
    let _type = Reflect.getMetadata("design:type", target, propertyKey);
    _existing.push(new _1.Dependency(propertyKey, containers_1.ClassContainer.getDependency(name || _type.name)));
    _1.Wrapper.insertDepedencies(target.constructor.name, _existing);
};
exports.is = (target) => {
    let _container = containers_1.ClassContainer.getDependency((_1.isPrimitive(target)) ? target : target['name']);
    if (_container)
        return _container.resolveDepedendencies();
};
exports.Easily = (name, target) => {
    let _static = new containers_1.StaticContainer(_1.Stereotype.Easily, [], name, target);
    _static.resolveDepedendencies();
};
//# sourceMappingURL=stereotypes.js.map